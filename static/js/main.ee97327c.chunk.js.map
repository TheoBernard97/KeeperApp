{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Note.jsx","components/CreateArea.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Header","Footer","year","Date","getFullYear","Note","props","className","title","content","onClick","deleteNote","id","CreateArea","React","useState","createAreaActive","setCreateAreaActive","note","setNote","handleChange","event","target","name","value","prevValue","placeholder","onChange","rows","Zoom","in","Fab","preventDefault","addNote","App","noteList","setNoteList","prevNotes","filter","index","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAUeA,MARf,WACE,OACE,gCACE,2CCMSC,MATf,WACE,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,gCACE,+CAAgBF,K,iBCaPG,MAhBf,SAAcC,GACZ,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAME,OACX,2BAAIF,EAAMG,SACV,4BACEC,QAAS,WACPJ,EAAMK,WAAWL,EAAMM,MAGzB,kBAAC,IAAD,S,iDCiDOC,MAzDf,SAAoBP,GAAQ,IAAD,EACuBQ,IAAMC,UAAS,GADtC,mBAClBC,EADkB,KACAC,EADA,OAEDH,IAAMC,SAAS,CACrCP,MAAO,GACPC,QAAS,KAJc,mBAElBS,EAFkB,KAEZC,EAFY,KAOzB,SAASC,EAAaC,GAAQ,IAAD,EACHA,EAAMC,OAAtBC,EADmB,EACnBA,KAAMC,EADa,EACbA,MAEdL,GAAQ,SAAAM,GACN,OAAO,eAAKA,EAAZ,eAAwBF,EAAOC,OAInC,OACE,6BACE,0BAAMjB,UAAU,eACbS,GACC,2BACEO,KAAK,QACLG,YAAY,QACZC,SAAUP,EACVI,MAAON,EAAKV,QAIhB,8BACEe,KAAK,UACLG,YAAY,iBACZE,KAAMZ,EAAmB,IAAM,IAC/BW,SAAUP,EACVV,QAAS,WACPO,GAAoB,IAEtBO,MAAON,EAAKT,UAEd,kBAACoB,EAAA,EAAD,CAAMC,KAAId,GACR,kBAACe,EAAA,EAAD,CACErB,QAAS,SAAAW,GACPA,EAAMW,iBACN1B,EAAM2B,QAAQf,GACdD,GAAoB,GACpBE,EAAQ,CACNX,MAAO,GACPC,QAAS,OAIb,kBAAC,IAAD,WCbGyB,MAnCf,WAAgB,IAAD,EACmBpB,IAAMC,SAAS,IADlC,mBACNoB,EADM,KACIC,EADJ,KASb,SAASzB,EAAWC,GAClBwB,GAAY,SAAAC,GACV,OAAOA,EAAUC,QAAO,SAACpB,EAAMqB,GAC7B,OAAOA,IAAU3B,QAKvB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYqB,QAjBhB,SAAiBf,GACfkB,GAAY,SAAAC,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAsBnB,UAgBrBiB,EAASK,KAAI,SAACtB,EAAMqB,GAAP,OACZ,kBAAC,EAAD,CACEE,IAAKF,EACL3B,GAAI2B,EACJ/B,MAAOU,EAAKV,MACZC,QAASS,EAAKT,QACdE,WAAYA,OAGhB,kBAAC,EAAD,QCxBc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee97327c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>KeeperApp</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  const year = new Date().getFullYear();\r\n  return (\r\n    <footer>\r\n      <p>Copyright â“’ {year}</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nfunction Note(props) {\r\n  return (\r\n    <div className=\"note\">\r\n      <h1>{props.title}</h1>\r\n      <p>{props.content}</p>\r\n      <button\r\n        onClick={() => {\r\n          props.deleteNote(props.id);\r\n        }}\r\n      >\r\n        <DeleteIcon />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\nimport Zoom from \"@material-ui/core/Zoom\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nfunction CreateArea(props) {\r\n  const [createAreaActive, setCreateAreaActive] = React.useState(false);\r\n  const [note, setNote] = React.useState({\r\n    title: \"\",\r\n    content: \"\"\r\n  });\r\n\r\n  function handleChange(event) {\r\n    const { name, value } = event.target;\r\n\r\n    setNote(prevValue => {\r\n      return { ...prevValue, [name]: value };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"create-note\">\r\n        {createAreaActive && (\r\n          <input\r\n            name=\"title\"\r\n            placeholder=\"Title\"\r\n            onChange={handleChange}\r\n            value={note.title}\r\n          />\r\n        )}\r\n\r\n        <textarea\r\n          name=\"content\"\r\n          placeholder=\"Take a note...\"\r\n          rows={createAreaActive ? \"3\" : \"1\"}\r\n          onChange={handleChange}\r\n          onClick={() => {\r\n            setCreateAreaActive(true);\r\n          }}\r\n          value={note.content}\r\n        />\r\n        <Zoom in={createAreaActive ? true : false}>\r\n          <Fab\r\n            onClick={event => {\r\n              event.preventDefault();\r\n              props.addNote(note);\r\n              setCreateAreaActive(false);\r\n              setNote({\r\n                title: \"\",\r\n                content: \"\"\r\n              });\r\n            }}\r\n          >\r\n            <AddIcon />\r\n          </Fab>\r\n        </Zoom>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateArea;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n\nfunction App() {\n  const [noteList, setNoteList] = React.useState([]);\n\n  function addNote(note) {\n    setNoteList(prevNotes => {\n      return [...prevNotes, note];\n    });\n  }\n\n  function deleteNote(id) {\n    setNoteList(prevNotes => {\n      return prevNotes.filter((note, index) => {\n        return index !== id;\n      });\n    });\n  }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea addNote={addNote} />\n      {noteList.map((note, index) => (\n        <Note\n          key={index}\n          id={index}\n          title={note.title}\n          content={note.content}\n          deleteNote={deleteNote}\n        />\n      ))}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}